/**
 * WorldChain SDK com patch AGRESSIVO para v0
 */

// üî• CARREGA O PATCH AGRESSIVO PRIMEIRO
import "./v0-bignumber-aggressive"

let TokenProvider: any = null
let sdkLoaded = false

export async function loadWorldChainSDKV0Aggressive() {
  if (sdkLoaded && TokenProvider) {
    return { TokenProvider, sdkLoaded: true }
  }

  try {
    console.log("üöÄ Carregando WorldChain SDK com PATCH AGRESSIVO v0...")

    // Aguarda para garantir que os patches foram aplicados
    await new Promise((resolve) => setTimeout(resolve, 500))

    // For√ßa teste do BigNumber antes de carregar SDK
    console.log("üß™ Testando BigNumber ap√≥s patch agressivo...")
    try {
      const bn = new BigNumberOriginal("123.456")
      console.log("‚úÖ BigNumber funcionando:", bn.toString())

      // Testa se o global est√° funcionando
      const globalBN = (globalThis as any).BigNumber
      if (globalBN) {
        const bn2 = new globalBN("789.123")
        console.log("‚úÖ Global BigNumber funcionando:", bn2.toString())
      }
    } catch (bnError) {
      console.error("‚ùå BigNumber ainda n√£o funciona:", bnError)
      return { TokenProvider: null, sdkLoaded: false }
    }

    console.log("üîÑ Tentando carregar SDK ap√≥s patch agressivo...")

    // Tenta carregar o SDK
    const sdk = await import("@holdstation/worldchain-sdk")

    TokenProvider = sdk.TokenProvider || sdk.default?.TokenProvider

    if (TokenProvider) {
      sdkLoaded = true
      console.log("üéâ WorldChain SDK carregado com PATCH AGRESSIVO!")
      console.log("‚úÖ TokenProvider dispon√≠vel:", typeof TokenProvider)

      return { TokenProvider, sdkLoaded: true }
    } else {
      throw new Error("TokenProvider n√£o encontrado no SDK")
    }
  } catch (error) {
    console.error("‚ùå Erro ao carregar WorldChain SDK agressivo:", error)
    console.error("üìã Stack:", (error as Error).stack)

    // Se ainda falhar, tenta uma √∫ltima vez com delay maior
    if ((error as Error).message.includes("BigNumber")) {
      console.log("üî• Tentando √öLTIMA CHANCE com delay maior...")

      try {
        // Aguarda mais tempo
        await new Promise((resolve) => setTimeout(resolve, 1000))

        // Re-aplica patches
        ;(globalThis as any).BigNumber = BigNumberOriginal
        ;(globalThis as any).__BIGNUMBER_MODULE__ = {
          default: BigNumberOriginal,
          BigNumber: BigNumberOriginal,
        }

        // Tenta carregar novamente
        const sdk = await import("@holdstation/worldchain-sdk")
        TokenProvider = sdk.TokenProvider || sdk.default?.TokenProvider

        if (TokenProvider) {
          sdkLoaded = true
          console.log("üéâ SDK carregado na √öLTIMA CHANCE!")
          return { TokenProvider, sdkLoaded: true }
        }
      } catch (lastChanceError) {
        console.error("‚ùå √öLTIMA CHANCE falhou:", lastChanceError)
      }
    }

    return { TokenProvider: null, sdkLoaded: false }
  }
}

// Importa BigNumber para ter acesso direto
import BigNumberOriginal from "bignumber.js"

// Fun√ß√£o para testar BigNumber agressivo
export function testBigNumberAggressive() {
  try {
    console.log("üß™ Testando BigNumber AGRESSIVO...")

    // Teste 1: Import direto
    const bn1 = new BigNumberOriginal("123.456")
    console.log("‚úÖ Import direto:", bn1.toString())

    // Teste 2: Global
    const globalBN = (globalThis as any).BigNumber
    if (globalBN) {
      const bn2 = new globalBN("789.123")
      console.log("‚úÖ Global BigNumber:", bn2.toString())
    }

    // Teste 3: M√≥dulo mock
    const moduleBN = (globalThis as any).__BIGNUMBER_MODULE__?.BigNumber
    if (moduleBN) {
      const bn3 = new moduleBN("456.789")
      console.log("‚úÖ Module BigNumber:", bn3.toString())
    }

    // Teste 4: Window
    if (typeof window !== "undefined") {
      const windowBN = (window as any).BigNumber
      if (windowBN) {
        const bn4 = new windowBN("999.111")
        console.log("‚úÖ Window BigNumber:", bn4.toString())
      }
    }

    console.log("üéâ Todos os testes BigNumber AGRESSIVO passaram!")
    return true
  } catch (error) {
    console.error("‚ùå Teste BigNumber AGRESSIVO falhou:", error)
    return false
  }
}
