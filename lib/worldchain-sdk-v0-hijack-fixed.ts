/**
 * WorldChain SDK com HIJACK CORRIGIDO
 */

// üî• CARREGA O HIJACK CORRIGIDO PRIMEIRO
import "./v0-module-hijack-fixed"

let TokenProvider: any = null
let sdkLoaded = false

export async function loadWorldChainSDKV0HijackFixed() {
  if (sdkLoaded && TokenProvider) {
    return { TokenProvider, sdkLoaded: true }
  }

  try {
    console.log("üöÄ Carregando WorldChain SDK com HIJACK CORRIGIDO...")

    // Aguarda para garantir que o hijack foi aplicado
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // Testa BigNumber com prote√ß√£o
    console.log("üß™ Teste BigNumber CORRIGIDO...")
    try {
      const bn = new BigNumberOriginal("999.888")
      console.log("‚úÖ BigNumber CORRIGIDO test:", bn.toString())

      // Testa global com prote√ß√£o
      const globalBN = (globalThis as any).BigNumber
      if (globalBN && typeof globalBN === "function") {
        const bn2 = new globalBN("777.666")
        console.log("‚úÖ Global BigNumber CORRIGIDO:", bn2.toString())
      }
    } catch (bnError) {
      console.error("‚ùå BigNumber CORRIGIDO test falhou:", bnError)
      // N√£o retorna erro, continua tentando
    }

    console.log("üîÑ Tentando carregar SDK com HIJACK CORRIGIDO...")

    // Tenta carregar o SDK com m√∫ltiplas tentativas
    let sdk: any = null
    let attempts = 0
    const maxAttempts = 3

    while (!sdk && attempts < maxAttempts) {
      attempts++
      console.log(`üìû Tentativa ${attempts}/${maxAttempts} de carregar SDK...`)

      try {
        sdk = await import("@holdstation/worldchain-sdk")
        console.log("‚úÖ SDK carregado na tentativa", attempts)
        break
      } catch (sdkError) {
        console.warn(`‚ö†Ô∏è Tentativa ${attempts} falhou:`, (sdkError as Error).message)
        if (attempts < maxAttempts) {
          console.log("üîÑ Aguardando antes da pr√≥xima tentativa...")
          await new Promise((resolve) => setTimeout(resolve, 1000))
        }
      }
    }

    if (!sdk) {
      throw new Error("Falha ao carregar SDK ap√≥s m√∫ltiplas tentativas")
    }

    TokenProvider = sdk.TokenProvider || sdk.default?.TokenProvider

    if (TokenProvider && typeof TokenProvider === "function") {
      sdkLoaded = true
      console.log("üéâ WorldChain SDK carregado com HIJACK CORRIGIDO!")
      console.log("‚úÖ TokenProvider dispon√≠vel:", typeof TokenProvider)

      // üî• CONFIGURA PARTNER CODE GLOBALMENTE
      try {
        console.log("üè∑Ô∏è Configurando partner code global CORRIGIDO...")

        // M√∫ltiplas tentativas de configurar partner code
        let partnerCodeSet = false

        // Tentativa 1: Via SDK principal
        if (sdk.setPartnerCode && typeof sdk.setPartnerCode === "function") {
          try {
            const result = sdk.setPartnerCode("tpulsefi")
            console.log("‚úÖ Partner code definido via SDK.setPartnerCode():", result)
            partnerCodeSet = true
          } catch (partnerError) {
            console.warn("‚ö†Ô∏è Erro no SDK.setPartnerCode:", partnerError)
          }
        }

        // Tentativa 2: Via m√≥dulo partner
        if (!partnerCodeSet) {
          try {
            const partnerModule = await import("@holdstation/worldchain-sdk/dist/partner")
            if (partnerModule.setPartnerCode && typeof partnerModule.setPartnerCode === "function") {
              const result = partnerModule.setPartnerCode("tpulsefi")
              console.log("‚úÖ Partner code definido via partner module:", result)
              partnerCodeSet = true
            }
          } catch (partnerError) {
            console.log("‚ÑπÔ∏è Partner module n√£o dispon√≠vel:", partnerError)
          }
        }

        // Tentativa 3: Via importa√ß√£o direta
        if (!partnerCodeSet) {
          try {
            const { setPartnerCode } = await import("@holdstation/worldchain-sdk")
            if (setPartnerCode && typeof setPartnerCode === "function") {
              const result = setPartnerCode("tpulsefi")
              console.log("‚úÖ Partner code definido via import direto:", result)
              partnerCodeSet = true
            }
          } catch (directError) {
            console.log("‚ÑπÔ∏è Import direto falhou:", directError)
          }
        }

        // Verifica se foi definido
        try {
          if (sdk.getPartnerCode && typeof sdk.getPartnerCode === "function") {
            const currentCode = sdk.getPartnerCode()
            console.log("üìã Partner code verificado:", currentCode)
          }
        } catch (verifyError) {
          console.warn("‚ö†Ô∏è Erro ao verificar partner code:", verifyError)
        }

        console.log("üìã Partner code configurado:", partnerCodeSet ? "‚úÖ Sucesso" : "‚ö†Ô∏è Falhou")
      } catch (partnerError) {
        console.warn("‚ö†Ô∏è Erro geral ao configurar partner code:", partnerError)
      }

      return { TokenProvider, sdkLoaded: true }
    } else {
      throw new Error("TokenProvider n√£o encontrado ou n√£o √© uma fun√ß√£o")
    }
  } catch (error) {
    console.error("‚ùå Erro ao carregar WorldChain SDK HIJACK CORRIGIDO:", error)
    console.error("üìã Stack:", (error as Error).stack)

    return { TokenProvider: null, sdkLoaded: false }
  }
}

// Importa BigNumber para ter acesso direto
import BigNumberOriginal from "bignumber.js"

// Fun√ß√£o para testar BigNumber corrigido
export function testBigNumberHijackFixed() {
  try {
    console.log("üß™ Testando BigNumber HIJACK CORRIGIDO...")

    // Teste 1: Import direto com prote√ß√£o
    try {
      const bn1 = new BigNumberOriginal("123.456")
      console.log("‚úÖ Import direto CORRIGIDO:", bn1.toString())
    } catch (directError) {
      console.error("‚ùå Import direto falhou:", directError)
      return false
    }

    // Teste 2: Global com prote√ß√£o
    try {
      const globalBN = (globalThis as any).BigNumber
      if (globalBN && typeof globalBN === "function") {
        const bn2 = new globalBN("789.123")
        console.log("‚úÖ Global BigNumber CORRIGIDO:", bn2.toString())
      } else {
        console.warn("‚ö†Ô∏è Global BigNumber n√£o dispon√≠vel")
      }
    } catch (globalError) {
      console.error("‚ùå Global BigNumber falhou:", globalError)
    }

    // Teste 3: Cache check com prote√ß√£o
    try {
      const moduleCache = (globalThis as any).__BIGNUMBER_MODULE__
      if (moduleCache && moduleCache.BigNumber) {
        console.log("‚úÖ Module cache CORRIGIDO:", typeof moduleCache.BigNumber)
      } else {
        console.warn("‚ö†Ô∏è Module cache n√£o dispon√≠vel")
      }
    } catch (cacheError) {
      console.error("‚ùå Module cache falhou:", cacheError)
    }

    console.log("üéâ Teste BigNumber HIJACK CORRIGIDO conclu√≠do!")
    return true
  } catch (error) {
    console.error("‚ùå Teste BigNumber HIJACK CORRIGIDO falhou:", error)
    return false
  }
}
