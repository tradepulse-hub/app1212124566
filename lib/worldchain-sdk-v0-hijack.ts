/**
 * WorldChain SDK com HIJACK TOTAL - FOR√áAR SDK REAL
 */

// üî• APLICA HIJACK ANTES DE TUDO
import "./v0-module-hijack-fixed"

let TokenProvider: any = null
let sdkLoaded = false

export async function loadWorldChainSDKV0Hijack() {
  if (sdkLoaded && TokenProvider) {
    return { TokenProvider, sdkLoaded: true }
  }

  try {
    console.log("üöÄ Carregando WorldChain SDK REAL - FOR√áANDO CARREGAMENTO...")

    // Aguarda para garantir que o hijack foi aplicado
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // üî• FOR√áA LIMPEZA TOTAL DE QUALQUER CACHE
    console.log("üßπ Limpeza TOTAL de caches...")
    if (typeof window !== "undefined" && (window as any).__webpack_require__) {
      const webpackRequire = (window as any).__webpack_require__
      if (webpackRequire.cache) {
        Object.keys(webpackRequire.cache).forEach((key) => {
          if (key.includes("holdstation") || key.includes("worldchain") || key.includes("bignumber")) {
            delete webpackRequire.cache[key]
            console.log(`üóëÔ∏è Removido do cache: ${key}`)
          }
        })
      }
    }

    // üî• CONFIGURA PARTNER CODE GLOBALMENTE ANTES DE CARREGAR SDK
    console.log("üè∑Ô∏è Configurando partner code ANTES do carregamento...")

    // Registra partner code globalmente
    ;(globalThis as any).__HOLDSTATION_PARTNER_CODE__ = "tpulsefi"
    ;(globalThis as any).__WORLDCHAIN_PARTNER__ = "tpulsefi"

    if (typeof window !== "undefined") {
      ;(window as any).__HOLDSTATION_PARTNER_CODE__ = "tpulsefi"
      ;(window as any).__WORLDCHAIN_PARTNER__ = "tpulsefi"
    }

    console.log("‚úÖ Partner code configurado globalmente ANTES do SDK")

    // üî• FOR√áA CARREGAMENTO DIRETO DO SDK SEM CACHE
    console.log("üîÑ FOR√áANDO carregamento direto do SDK...")

    // Tenta m√∫ltiplas estrat√©gias de carregamento
    let sdk: any = null
    let loadStrategy = ""

    // Estrat√©gia 1: Import direto com timestamp para evitar cache
    try {
      console.log("üìû Estrat√©gia 1: Import direto com cache-bust...")
      const timestamp = Date.now()
      sdk = await import(`@holdstation/worldchain-sdk?t=${timestamp}`)
      loadStrategy = "Import direto com cache-bust"
      console.log("‚úÖ SDK carregado via estrat√©gia 1")
    } catch (strategy1Error) {
      console.warn("‚ö†Ô∏è Estrat√©gia 1 falhou:", (strategy1Error as Error).message)
    }

    // Estrat√©gia 2: Import com dynamic import for√ßado
    if (!sdk) {
      try {
        console.log("üìû Estrat√©gia 2: Dynamic import for√ßado...")
        const importFn = new Function("specifier", "return import(specifier)")
        sdk = await importFn("@holdstation/worldchain-sdk")
        loadStrategy = "Dynamic import for√ßado"
        console.log("‚úÖ SDK carregado via estrat√©gia 2")
      } catch (strategy2Error) {
        console.warn("‚ö†Ô∏è Estrat√©gia 2 falhou:", (strategy2Error as Error).message)
      }
    }

    // Estrat√©gia 3: Fetch direto do m√≥dulo
    if (!sdk) {
      try {
        console.log("üìû Estrat√©gia 3: Fetch direto...")
        // Esta estrat√©gia √© mais complexa e espec√≠fica para v0
        console.log("‚ö†Ô∏è Estrat√©gia 3 n√£o implementada para v0")
      } catch (strategy3Error) {
        console.warn("‚ö†Ô∏è Estrat√©gia 3 falhou:", (strategy3Error as Error).message)
      }
    }

    if (!sdk) {
      throw new Error("Todas as estrat√©gias de carregamento falharam - SDK n√£o dispon√≠vel")
    }

    console.log("üéØ SDK carregado com estrat√©gia:", loadStrategy)
    console.log("üìã SDK exports:", Object.keys(sdk))

    // üî• EXTRAI TOKENPROVIDER COM VERIFICA√á√ÉO RIGOROSA
    TokenProvider = sdk.TokenProvider || sdk.default?.TokenProvider

    if (!TokenProvider) {
      console.error("‚ùå TokenProvider n√£o encontrado nos exports do SDK")
      console.log("üìã Exports dispon√≠veis:", Object.keys(sdk))
      throw new Error("TokenProvider n√£o encontrado no SDK")
    }

    if (typeof TokenProvider !== "function") {
      console.error("‚ùå TokenProvider n√£o √© uma fun√ß√£o:", typeof TokenProvider)
      throw new Error("TokenProvider n√£o √© um construtor v√°lido")
    }

    console.log("‚úÖ TokenProvider extra√≠do:", typeof TokenProvider)

    // üî• CONFIGURA PARTNER CODE NO SDK CARREGADO
    try {
      console.log("üè∑Ô∏è Configurando partner code no SDK carregado...")

      // M√∫ltiplas tentativas de configurar partner code
      let partnerCodeSet = false

      // Tentativa 1: Via SDK principal
      if (sdk.setPartnerCode && typeof sdk.setPartnerCode === "function") {
        try {
          const result = sdk.setPartnerCode("tpulsefi")
          console.log("‚úÖ Partner code definido via SDK.setPartnerCode():", result)
          partnerCodeSet = true
        } catch (partnerError) {
          console.warn("‚ö†Ô∏è Erro no SDK.setPartnerCode:", partnerError)
        }
      }

      // Tentativa 2: Via m√≥dulo partner
      if (!partnerCodeSet) {
        try {
          const partnerModule = await import("@holdstation/worldchain-sdk/dist/partner")
          if (partnerModule.setPartnerCode && typeof partnerModule.setPartnerCode === "function") {
            const result = partnerModule.setPartnerCode("tpulsefi")
            console.log("‚úÖ Partner code definido via partner module:", result)
            partnerCodeSet = true
          }
        } catch (partnerError) {
          console.log("‚ÑπÔ∏è Partner module n√£o dispon√≠vel:", partnerError)
        }
      }

      // Tentativa 3: Via importa√ß√£o direta
      if (!partnerCodeSet) {
        try {
          const { setPartnerCode } = await import("@holdstation/worldchain-sdk")
          if (setPartnerCode && typeof setPartnerCode === "function") {
            const result = setPartnerCode("tpulsefi")
            console.log("‚úÖ Partner code definido via import direto:", result)
            partnerCodeSet = true
          }
        } catch (directError) {
          console.log("‚ÑπÔ∏è Import direto falhou:", directError)
        }
      }

      // Verifica se foi definido
      try {
        if (sdk.getPartnerCode && typeof sdk.getPartnerCode === "function") {
          const currentCode = sdk.getPartnerCode()
          console.log("üìã Partner code verificado:", currentCode)
        }
      } catch (verifyError) {
        console.warn("‚ö†Ô∏è Erro ao verificar partner code:", verifyError)
      }

      console.log("üìã Partner code configurado:", partnerCodeSet ? "‚úÖ Sucesso" : "‚ö†Ô∏è Falhou")
    } catch (partnerError) {
      console.warn("‚ö†Ô∏è Erro geral ao configurar partner code:", partnerError)
    }

    sdkLoaded = true
    console.log("üéâ WorldChain SDK REAL carregado com sucesso!")
    console.log("‚úÖ TokenProvider dispon√≠vel:", typeof TokenProvider)
    console.log("üìã Estrat√©gia usada:", loadStrategy)

    return { TokenProvider, sdkLoaded: true }
  } catch (error) {
    console.error("‚ùå Erro ao carregar WorldChain SDK REAL:", error)
    console.error("üìã Stack:", (error as Error).stack)

    // üî• N√ÉO USAR MOCK - RETORNAR ERRO
    console.error("üö´ RECUSANDO usar mock - apenas SDK REAL √© aceito")
    return { TokenProvider: null, sdkLoaded: false }
  }
}

// Importa BigNumber para ter acesso direto
import BigNumberOriginal from "bignumber.js"

// Fun√ß√£o para testar BigNumber hijack
export function testBigNumberHijack() {
  try {
    console.log("üß™ Testando BigNumber HIJACK...")

    // Teste 1: Import direto
    const bn1 = new BigNumberOriginal("123.456")
    console.log("‚úÖ Import direto:", bn1.toString())

    // Teste 2: Global
    const globalBN = (globalThis as any).BigNumber
    if (globalBN) {
      const bn2 = new globalBN("789.123")
      console.log("‚úÖ Global BigNumber:", bn2.toString())
    }

    // Teste 3: Cache check
    const moduleCache = (globalThis as any).__BIGNUMBER_MODULE__
    if (moduleCache) {
      console.log("‚úÖ Module cache:", typeof moduleCache.BigNumber)
    }

    console.log("üéâ Todos os testes BigNumber HIJACK passaram!")
    return true
  } catch (error) {
    console.error("‚ùå Teste BigNumber HIJACK falhou:", error)
    return false
  }
}
